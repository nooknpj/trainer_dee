import React, { Component } from "react";
import { Form, Alert } from "react-bootstrap";
import "./css/navBar.css";
import {
  Nav,
  Navbar,
  NavItem,
  NavbarBrand,
  Button,
  Modal
} from "react-bootstrap";

export class MyNavBar extends Component {
  constructor() {
    super();
    this.state = {
      showLogin: 0,
      showAuthenFailed: 0,
      email: "notAssigned",
      password: "notAssigned"
    };
  }

  // //-------------show current page -----------------------------------------------------------------

  getIsHome = () => {
    if (this.props.currentPage != "/") return;
    let currentPageStyle = {
      backgroundColor: "white",
      color: "black",
      borderRadius: "10px"
    };
    return currentPageStyle;
  };

  getIsSearchCourses = () => {
    if (this.props.currentPage != "/searchCourses") return;
    let currentPageStyle = {
      backgroundColor: "white",
      color: "black",
      borderRadius: "10px"
    };
    return currentPageStyle;
  };

  getIsAddCourse = () => {
    if (this.props.currentPage != "/addCourse") return;
    let currentPageStyle = {
      backgroundColor: "white",
      color: "black",
      borderRadius: "10px"
    };
    return currentPageStyle;
  };

  getIsMyCourse = () => {
    if (this.props.currentPage != "/myCourse") return;
    let currentPageStyle = {
      backgroundColor: "white",
      color: "black",
      borderRadius: "10px"
    };
    return currentPageStyle;
  };

  getIsMySession = () => {
    if (this.props.currentPage != "/mySession") return;
    let currentPageStyle = {
      backgroundColor: "white",
      color: "black",
      borderRadius: "10px"
    };
    return currentPageStyle;
  };

  getIsReserveSession = () => {
    if (this.props.currentPage != "/reserveSession") return;
    let currentPageStyle = {
      backgroundColor: "white",
      color: "black",
      borderRadius: "10px"
    };
    return currentPageStyle;
  };

  getIsMyAccount = () => {
    if (
      !(
        this.props.currentPage == "/myAccount" ||
        this.props.currentPage == "/editProfile" ||
        this.props.currentPage == "/upgrade"
      )
    )
      return;
    let currentPageStyle = {
      backgroundColor: "white",
      color: "black",
      borderRadius: "10px"
    };
    return currentPageStyle;
  };

  getIsRegister = () => {
    if (this.props.currentPage != "/register") return;
    let currentPageStyle = {
      backgroundColor: "white",
      color: "black",
      borderRadius: "10px"
    };
    return currentPageStyle;
  };

  //-------------show current page -----------------------------------------------------------------
  onLoginClick = () => {
    this.setState({ showLogin: 1 });
  };

  // update email and password according to the email and password form
  onFormChange = e => {
    this.state[e.target.type] = e.target.value;
  };

  handleKeyPress = target => {
    if (target.charCode == 13) {
      this.onSubmitLoginClick();
    }
  };

  onSubmitLoginClick = () => {
    let clientID = this.fetchLoginAuthen(this.state);
  };

  async fetchLoginAuthen(e) {
    try {
      console.log(JSON.stringify(e));
      const response = await fetch("/trainer_dee/login_authentication", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(e)
      });

      let status = response.status;
      if (status == 400) {
        this.setState({
          showAuthenFailed: 1
        });
        return 0;
      }
      if (status == 200) {
        let results = await response.json();
        console.log("successful login");
        console.log(results);
        console.log(results[0].clientID);
        console.log(results[0].fName);
        console.log(results[0].isTrainer);
        localStorage.setItem("clientID", results[0].clientID);
        localStorage.setItem("fName", results[0].fName);
        localStorage.setItem("isTrainer", results[0].isTrainer);
        localStorage.setItem("isLoggedIn", 1);
        this.handleClose();
        console.log(localStorage.getItem("clientID"));
        console.log(localStorage.getItem("fName"));
        console.log(localStorage.getItem("isLoggedIn"));
        console.log(localStorage.getItem("isTrainer"));
        window.location = "/";

        // window.location.reload();
        return results;
      }
    } catch (error) {
      console.log("FetchLoginAuthen failed", error);
    }
  }

  handleClose = () => {
    this.setState({ showLogin: 0, showAuthenFailed: 0 });
  };

  onLogoutClick = () => {
    this.setState = {
      showLogin: 0,
      showAuthenFailed: 0,
      email: "notAssigned",
      password: "notAssigned"
    };
    localStorage.clear();
    localStorage.setItem("isLoggedIn", "0");
    localStorage.setItem("isTrainer", "0");
    localStorage.setItem("clientID", "0");
    localStorage.setItem("fName", "unassigned");

    window.location = "/";
  };

  getAccountType = () => {
    if (localStorage.getItem("isTrainer") == 0) {
      return "Client   ";
    } else if (localStorage.getItem("isTrainer") == 1) {
      return "Trainer  ";
    } else return "";
  };

  render() {
    return (
      <div>
        <Navbar id="myNavBar" expand="xl" collapseOnSelect>
          <NavbarBrand id="navBrand" href="/">
            {" "}
            Trainer D
          </NavbarBrand>
          <Navbar.Toggle aria-controls="responsive-navbar-nav" />
          <Navbar.Collapse id="responsive-navbar-nav">
            <Nav>
              <a className="navLink" href="/" style={this.getIsHome()}>
                Home
              </a>
              <a
                className="navLink"
                href="/searchCourses"
                style={this.getIsSearchCourses()}
              >
                Search Courses
              </a>

              {localStorage.getItem("isLoggedIn") == 1 &&
              localStorage.getItem("isTrainer") == 1 ? (
                <a
                  className="navLink"
                  href="/addCourse"
                  style={this.getIsAddCourse()}
                >
                  Add Course
                </a>
              ) : (
                <div />
              )}
            </Nav>

            {localStorage.getItem("isLoggedIn") == 0 ? (
              <Nav className="nav navbar-nav ml-auto">
                <a
                  className="navLink"
                  href="/register"
                  style={this.getIsRegister()}
                >
                  Register
                </a>

                <a
                  onClick={this.onLoginClick}
                  className="navLink"
                  href="javascript:void(0);"
                >
                  Login
                </a>
              </Nav>
            ) : (
              <Nav className="nav navbar-nav ml-auto">
                {localStorage.getItem("isLoggedIn") == 1 ? (
                  <a
                    className="navLink"
                    href="/myCourse"
                    style={this.getIsMyCourse()}
                  >
                    My Course
                  </a>
                ) : (
                  <div />
                )}

                <a
                  className="navLink"
                  href="/mySession"
                  style={this.getIsMySession()}
                >
                  My Session
                </a>
                <a
                  className="navLink"
                  href="/myAccount"
                  style={this.getIsMyAccount()}
                >
                  My Account
                </a>
                <a
                  onClick={this.onLogoutClick}
                  className="navLink"
                  href="javascript:void(0);"
                >
                  Logout
                </a>
              </Nav>
            )}
          </Navbar.Collapse>
        </Navbar>

        {/* //loginPopUp */}
        <Modal show={this.state.showLogin} onHide={this.handleClose}>
          <Modal.Header closeButton>
            <Modal.Title>Login</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <Form.Group>
              <Form.Label>Email</Form.Label>
              <Form.Control
                type="email"
                placeholder="Email"
                onChange={this.onFormChange}
                onKeyPress={this.handleKeyPress}
              />
              <Form.Label>Password</Form.Label>
              <Form.Control
                type="password"
                placeholder="Password"
                onChange={this.onFormChange}
                onKeyPress={this.handleKeyPress}
              />
            </Form.Group>
          </Modal.Body>
          <Modal.Footer>
            <Alert show={this.state.showAuthenFailed} variant="danger">
              Incorrect Email or Password. Please Try again.
            </Alert>
            <Button
              variant="primary"
              type="submit"
              onClick={this.onSubmitLoginClick}
            >
              Login
            </Button>
          </Modal.Footer>
        </Modal>
      </div>
    );
  }
}

var isLoggedIn = localStorage.getItem("isLoggedIn");

export default MyNavBar;
.App {
  font-family: "Poppins", sans-serif;
  background-color: #c7c9c7;
  /* min-width: 1000px; */
  width: 100%;
  height: 100%;
  font-size: 1em;
}
.Content {
  /* padding top left bottom right */
  padding: 60px 0 80px 0;
}
#testHeader {
  font-size: 100px;
}

/* Footer Style */
.FooterLink {
  color: white;
  font-weight: bold;
  padding-left: 10px;
  padding-right: 10px;
  padding-top: 3px;
  padding-bottom: 3px;
  transition-duration: 0.3s;
  transition-duration: 200ms;
}
.FooterLink:hover {
  background-color: white;
  font-weight: bold;
  text-decoration: none;
  border-radius: 5px;
  color: #006cb0;
}

#footerDplop {
  font-size: 1.5em;
  font-weight: bold;
  padding-left: 15px;
  padding-right: 15px;
  padding-top: 3px;
  padding-bottom: 3px;
  border-radius: 15px;
  background-color: #283266;
}

/*toggle button styling*/

.toggleButton {
  background-color: #2dc84d;
  color: white;
  border-radius: 10px;
  border: solid 3px white;
  margin-left: 5px;
  margin-top: 5px;
  transition-duration: 200ms;
}

.deactivatedButton {
  background-color: grey;
  color: white;
  border-radius: 10px;
  border: solid 3px white;
  margin-left: 5px;
  margin-top: 5px;
  transition-duration: 200ms;
}

.toggleButton:hover {
  background-color: #2dc84d;
  color: white;
  border-radius: 10px;
  border: solid 3px #007041;
  margin-left: 5px;
  margin-top: 5px;
  transition-duration: 400ns;
}
.deactivatedButton:hover {
  color: white;
  border-radius: 10px;
  border: solid 3px #007041;
  background-color: grey;
  margin-left: 5px;
  margin-top: 5px;
  transition-duration: 400ns;
}

.buttonGroup {
  background-color: "red";
}
/*toggle button styling*/

/*Modal*/
.modalStyle {
  min-width: 1000px;
  height: 100%;
}
import React, { Component } from "react";
import { Tab, Tabs } from "react-bootstrap";
import ReserveSession from "./ReserveSession";
import SessionItem from "../components/SessionItem";
import CourseItem from "../components/CourseItem";
import "../css/component.css";

export class MySession extends Component {
  constructor(props, context) {
    super(props, context);
    this.state = {
      clientSessions: [],
      trainerSessions: []
    };
  }

  componentDidMount() {
    this.getClientSession();
    this.getTrainerSession();
  }

  async getClientSession() {
    // get clientID from localStorage and get sessions where this client is the client of the sessions and update the session list in state
    try {
      const data = { clientID: localStorage.getItem("clientID") };
      const response = await fetch("/trainer_dee/get_client_session", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      });

      const results = await response.json();

      this.setState(
        {
          clientSessions: results
        },
        () => {
          console.log(this.state.clientSessions);
          return 200;
        }
      );
    } catch (error) {
      console.log("defaultFetchError : ", error);
    }
  }

  async getTrainerSession() {
    // get clientID from localStorage and get sessions where this client is the trainer of the sessions and update the session list in state
    try {
      const data = { clientID: localStorage.getItem("clientID") };
      const response = await fetch("/trainer_dee/get_trainer_session", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      });

      const results = await response.json();

      this.setState(
        {
          trainerSessions: results
        },
        () => {
          console.log(this.state.trainerSessions);
          return 200;
        }
      );
    } catch (error) {
      console.log("defaultFetchError : ", error);
    }
  }

  render() {
    return (
      <div style={tabsContainerStyle}>
        <Tabs
          className="tabsClass"
          style={tabStyle}
          activeKey={this.state.key}
          onSelect={key => this.setState({ key })}
        >
          {localStorage.getItem("isTrainer") == 1 ? (
            <Tab
              style={tabStyle}
              eventKey="trainerSession"
              title="Trainer Sessions"
            >
              <div className="box">
                <p className="pageHeader">Trainer Sessions</p>
                {this.state.trainerSessions.length != 0 ? (
                  this.state.trainerSessions.map(sessionItem => (
                    <SessionItem
                      transactionID={sessionItem.transactionID}
                      sessionNo={sessionItem.sessionNo}
                      startTime={sessionItem.startTime}
                      duration={sessionItem.duration}
                      sessionStatus={sessionItem.sessionStatus}
                      cName={sessionItem.cName}
                      service={sessionItem.service}
                      fName={sessionItem.fName}
                      lName={sessionItem.lName}
                      telNo={sessionItem.telNo}
                      collegueRole="Client"
                    />
                  ))
                ) : (
                    <h5>No Trainer Sessions.</h5>
                  )}
              </div>
            </Tab>
          ) : (
              <div />
            )}

          <Tab eventKey="clientSession" title="Client Sessions">
            <div className="box">
              <p className="pageHeader"> Client Sessions </p>

              {this.state.clientSessions.length != 0 ? (
                this.state.clientSessions.map(sessionItem => (
                  <SessionItem
                    transactionID={sessionItem.transactionID}
                    sessionNo={sessionItem.sessionNo}
                    startTime={sessionItem.startTime}
                    duration={sessionItem.duration}
                    sessionStatus={sessionItem.sessionStatus}
                    cName={sessionItem.cName}
                    service={sessionItem.service}
                    fName={sessionItem.fName}
                    lName={sessionItem.lName}
                    telNo={sessionItem.telNo}
                    collegueRole="Trainer"
                  />
                ))
              ) : (
                  <h5>No client Sessions.</h5>
                )}
            </div>
          </Tab>
        </Tabs>
      </div>
    );
  }
}

const tabsContainerStyle = {
  fontSize: "15px",
  fontWeight: "bold",
  marginBottom: "20px"
};
const tabStyle = {};
export default MySession;
import React, { Component } from "react";
import { Tab, Tabs } from "react-bootstrap";
import ReserveSession from "./ReserveSession";
import SessionItem from "../components/SessionItem";
import CourseItem from "../components/CourseItem";
import "../css/component.css";

export class MySession extends Component {
  constructor(props, context) {
    super(props, context);
    this.state = {
      clientSessions: [],
      trainerSessions: []
    };
  }

  componentDidMount() {
    this.getClientSession();
    this.getTrainerSession();
  }

  async getClientSession() {
    // get clientID from localStorage and get sessions where this client is the client of the sessions and update the session list in state
    try {
      const data = { clientID: localStorage.getItem("clientID") };
      const response = await fetch("/trainer_dee/get_client_session", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      });

      const results = await response.json();

      this.setState(
        {
          clientSessions: results
        },
        () => {
          console.log(this.state.clientSessions);
          return 200;
        }
      );
    } catch (error) {
      console.log("defaultFetchError : ", error);
    }
  }

  async getTrainerSession() {
    // get clientID from localStorage and get sessions where this client is the trainer of the sessions and update the session list in state
    try {
      const data = { clientID: localStorage.getItem("clientID") };
      const response = await fetch("/trainer_dee/get_trainer_session", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      });

      const results = await response.json();

      this.setState(
        {
          trainerSessions: results
        },
        () => {
          console.log(this.state.trainerSessions);
          return 200;
        }
      );
    } catch (error) {
      console.log("defaultFetchError : ", error);
    }
  }

  render() {
    return (
      <div style={tabsContainerStyle}>
        <Tabs
          className="tabsClass"
          style={tabStyle}
          activeKey={this.state.key}
          onSelect={key => this.setState({ key })}
        >
          {localStorage.getItem("isTrainer") == 1 ? (
            <Tab
              style={tabStyle}
              eventKey="trainerSession"
              title="Trainer Sessions"
            >
              <div className="box">
                <p className="pageHeader">Trainer Sessions</p>
                {this.state.trainerSessions.length != 0 ? (
                  this.state.trainerSessions.map(sessionItem => (
                    <SessionItem
                      transactionID={sessionItem.transactionID}
                      sessionNo={sessionItem.sessionNo}
                      startTime={sessionItem.startTime}
                      duration={sessionItem.duration}
                      sessionStatus={sessionItem.sessionStatus}
                      cName={sessionItem.cName}
                      service={sessionItem.service}
                      fName={sessionItem.fName}
                      lName={sessionItem.lName}
                      telNo={sessionItem.telNo}
                      collegueRole="Client"
                    />
                  ))
                ) : (
                    <h5>No Trainer Sessions.</h5>
                  )}
              </div>
            </Tab>
          ) : (
              <div />
            )}

          <Tab eventKey="clientSession" title="Client Sessions">
            <div className="box">
              <p className="pageHeader"> Client Sessions </p>

              {this.state.clientSessions.length != 0 ? (
                this.state.clientSessions.map(sessionItem => (
                  <SessionItem
                    transactionID={sessionItem.transactionID}
                    sessionNo={sessionItem.sessionNo}
                    startTime={sessionItem.startTime}
                    duration={sessionItem.duration}
                    sessionStatus={sessionItem.sessionStatus}
                    cName={sessionItem.cName}
                    service={sessionItem.service}
                    fName={sessionItem.fName}
                    lName={sessionItem.lName}
                    telNo={sessionItem.telNo}
                    collegueRole="Trainer"
                  />
                ))
              ) : (
                  <h5>No client Sessions.</h5>
                )}
            </div>
          </Tab>
        </Tabs>
      </div>
    );
  }
}

const tabsContainerStyle = {
  fontSize: "15px",
  fontWeight: "bold",
  marginBottom: "20px"
};
const tabStyle = {};
export default MySession;
